package hr.fer.zemris.bf.utils;

import hr.fer.zemris.bf.model.*;
import hr.fer.zemris.bf.parser.Parser;

/**
 * Represents a node visitor which prints the hierarchy of the tree
 * model generated by the {@link Parser}.
 *
 * @author Luka Čupić
 */
public class ExpressionTreePrinter implements NodeVisitor {

    /**
     * Represents the indent of the currently visited node.
     */
    private int indent;

    /**
     * Creates a new instance of this class.
     */
    public ExpressionTreePrinter() {
        indent = 0;
    }

    @Override
    public void visit(ConstantNode node) {
        print(String.valueOf(node.getValue() ? 1 : 0));
    }

    @Override
    public void visit(VariableNode node) {
        print(node.getName());
    }

    @Override
    public void visit(UnaryOperatorNode node) {
        print(node.getName());

        indent += 2;
        Util.visitChild(this, node.getChild());
        indent -= 2;
    }

    @Override
    public void visit(BinaryOperatorNode node) {
        print(node.getName());

        indent += 2;
        for (Node child : node.getChildren()) {
            Util.visitChild(this, child);
        }
        indent -= 2;
    }

    /**
     * Prints the given string to the standard output, indenting it
     * by {@link ExpressionTreePrinter#indent} spaces to the right.
     *
     * @param s the string to print
     */
    private void print(String s) {
        if (indent == 0) {
            System.out.println(s);
        } else {
            System.out.printf("%" + indent + "s" + "%s" + "%n", "", s);
        }
    }
}
